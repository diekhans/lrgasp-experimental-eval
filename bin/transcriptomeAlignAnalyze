#!/usr/bin/env python3

import sys
import re
from collections import namedtuple
import argparse
import pysam
from pycbio.sys import fileOps

# WARNING:  The independent minimum statistics can be confusing a loser filter
# can actually improve some statistics


def parseArgs():
    desc = """get stats on alignment to transcriptome"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--target",
                        help="""only analyze this target name""")
    parser.add_argument("--maxEndsDiff", type=int, default=None,
                        help="""maximum variation in ends filter""")
    parser.add_argument("--maxIndelBases", type=int, default=None,
                        help="""maximum indel bases filter""")
    parser.add_argument("--maxIndelBaseRate", type=float, default=None,
                        help="""maximum indel base rate filter""")
    parser.add_argument("--minSimilarity", type=float, default=None,
                        help="""minimum similarity filter""")
    parser.add_argument("--readStatsTsv",
                        help="""output per-read statistics to this file""")
    parser.add_argument("--filteredBam",
                        help="""output BAMs passing the filter""")
    parser.add_argument("--filteredReads",
                        help="""output read id passing the filter""")
    parser.add_argument("transBam",
                        help="""alignment to transcriptome BAM""")
    parser.add_argument("statsTsv",
                        help="""output statistics to this file""")
    opts = parser.parse_args()
    opts.filters = Filters(target=opts.target,
                           maxEndsDiff=opts.maxEndsDiff,
                           maxIndelBases=opts.maxIndelBases,
                           maxIndelBaseRate=opts.maxIndelBaseRate,
                           minSimilarity=opts.minSimilarity)
    return opts


class Filters(namedtuple("Filters", ("target", "maxEndsDiff", "maxIndelBases",
                                     "maxIndelBaseRate", "minSimilarity"))):
    __slots__ = ()


class AlignStats(namedtuple("AlignStats",
                            ("qName",
                             "qSize",
                             "strand",
                             "qStartOff",
                             "qEndOff",
                             "alnBases",
                             "qDels",
                             "qDelBases",
                             "tDels",
                             "tDelBases",
                             "indelBaseRate",
                             "similarity"))):
    __slots__ = ()

def fmtCigar(cigar):
    return re.sub("([A-Z])", "\\1 ", cigar).strip()

def debugDump(bamFh, aln, rstats, fh=sys.stderr):
    for fld in ("reference_name", "reference_start", "reference_end"):
        fileOps.prRowv(fh, fld, getattr(aln, fld))
    fileOps.prRowv(fh, "reference_length", bamFh.get_reference_length(aln.reference_name))
    fileOps.prRowv(fh, "cigar", fmtCigar(aln.cigarstring))

    for fld in AlignStats._fields:
        fileOps.prRowv(fh, fld, getattr(rstats, fld))
    fh.write('\n')

def calcSimilarity(targetLen, aln, alnBases):
    return (2 * alnBases) / (aln.infer_query_length() + targetLen)

def computeReadStats(targetLen, aln):
    # soft clipped is handled by end filters
    baseCnts, blkCnts = aln.get_cigar_stats()
    alnBases = baseCnts[pysam.CMATCH] + baseCnts[pysam.CEQUAL] + baseCnts[pysam.CDIFF]
    qDels = blkCnts[pysam.CDEL] + blkCnts[pysam.CREF_SKIP]
    qDelBases = baseCnts[pysam.CDEL] + baseCnts[pysam.CREF_SKIP]
    tDels = blkCnts[pysam.CINS]
    tDelBases = baseCnts[pysam.CINS]
    indelBaseRate = (qDelBases + tDelBases) / (alnBases + qDelBases + tDelBases)

    return AlignStats(qName=aln.query_name,
                      qSize=aln.infer_query_length(),
                      strand=('-' if aln.flag & pysam.FREVERSE else '+'),
                      qStartOff=-aln.query_alignment_start,
                      qEndOff=targetLen - aln.query_alignment_end,
                      alnBases=alnBases,
                      qDels=qDels,
                      qDelBases=qDelBases,
                      tDels=tDels,
                      tDelBases=tDelBases,
                      indelBaseRate=round(indelBaseRate, 4),
                      similarity=round(calcSimilarity(targetLen, aln, alnBases), 4))

def filterReadStats(rstats, filters):
    if rstats.strand == '-':
        return False
    if (filters.maxEndsDiff is not None) and ((abs(rstats.qStartOff) > filters.maxEndsDiff) or (abs(rstats.qEndOff) > filters.maxEndsDiff)):
        return False
    if (filters.maxIndelBases is not None) and ((rstats.qDelBases + rstats.tDelBases) > filters.maxIndelBases):
        return False
    if (filters.maxIndelBaseRate is not None) and ((rstats.indelBaseRate) > filters.maxIndelBaseRate):
        return False
    if (filters.minSimilarity is not None) and ((rstats.similarity) < filters.minSimilarity):
        return False
    return True

def collectReadsStats(bamFh, target, filteredBamFh, filteredReadsFh, filters):
    # recs are AlignedSegment
    targetLen = bamFh.get_reference_length(target)
    readsStats = []
    for aln in bamFh.fetch(reference=target):
        rstats = computeReadStats(targetLen, aln)
        if filterReadStats(rstats, filters):
            readsStats.append(rstats)
            if filteredBamFh is not None:
                filteredBamFh.write(aln)
            if filteredReadsFh is not None:
                print(aln.query_name, file=filteredReadsFh)
    return readsStats

def readStatsOpen(readStatsTsv):
    readStatsFh = open(readStatsTsv, "w")
    fileOps.prRowv(readStatsFh, "target", *AlignStats._fields)
    return readStatsFh

def readStatsWrite(target, readsStats, readStatsFh):
    for rstats in readsStats:
        fileOps.prRowv(readStatsFh, target, *rstats)

def writeTargetHeader(statsFh):
    fileOps.prRowv(statsFh, "target", "transcript", "numSupports", "maxSimilarity", "minEndsDiff", "minIndelBases", "minIndelBaseRate",
                   "filter_minSimilarity", "filter_maxEndsDiff", "filter_maxIndelBases", "filter_maxIndelBaseRate")

def maxOffset(rs):
    "maximum offset from 0, maintaining direction"
    if abs(rs.qStartOff) >= abs(rs.qEndOff):
        return rs.qStartOff
    else:
        return rs.qEndOff

def minMaxOffset(readsStats):
    minOff = maxOffset(readsStats[0])
    for rs in readsStats:
        mo = maxOffset(rs)
        if abs(mo) < abs(minOff):
            minOff = mo
    return minOff

def calcReadsStats(readsStats):
    # minimum ends offset is annoying due to negatives, here the min is the max of the
    # of the individual mins ignoring the sign

    if len(readsStats) == 0:
        return 0.0, 0, 0, 0.0

    maxSimilarity = max([rs.similarity for rs in readsStats])
    minEndsDiff = minMaxOffset(readsStats)
    minIndelBases = min([rs.qDelBases + rs.tDelBases for rs in readsStats])
    minIndelBaseRate = min([rs.indelBaseRate for rs in readsStats])

    return (maxSimilarity, minEndsDiff, minIndelBases, minIndelBaseRate)

def writeTargetStats(target, readsStats, filters, statsFh):
    # manatee has targetId/transcriptId
    tparts = target.split('/')
    targetId = tparts[0]
    transId = tparts[1] if len(tparts) > 1 else None

    fileOps.prRowv(statsFh, targetId, transId, len(readsStats),
                   *calcReadsStats(readsStats),
                   filters.minSimilarity, filters.maxEndsDiff, filters.maxIndelBases, filters.maxIndelBases)

def processTarget(bamFh, target, readStatsFh, statsFh, filteredBamFh, filteredReadsFh,
                  filters):
    readsStats = collectReadsStats(bamFh, target, filteredBamFh, filteredReadsFh, filters)
    if readStatsFh is not None:
        readStatsWrite(target, readsStats, readStatsFh)
    writeTargetStats(target, readsStats, filters, statsFh)

def processTargets(bamFh, readStatsFh, statsFh, filteredBamFh, filteredReadsFh,
                   filters):
    targets = (filters.target,) if filters.target is not None else bamFh.references
    for atarget in targets:
        processTarget(bamFh, atarget, readStatsFh, statsFh, filteredBamFh, filteredReadsFh, filters)

def transcriptomeAlignAnalyzeFh(bamFh, statsTsv, readStatsTsv, filteredBam, filteredReads,
                                filters):
    readStatsFh = readStatsOpen(readStatsTsv) if readStatsTsv is not None else None
    filteredReadsFh = open(filteredReads, 'w') if filteredReads is not None else None
    filteredBamFh = pysam.AlignmentFile(filteredBam, 'wb', template=bamFh) if filteredBam is not None else None

    with open(statsTsv, 'w') as statsFh:
        writeTargetHeader(statsFh)
        processTargets(bamFh, readStatsFh, statsFh, filteredBamFh, filteredReadsFh, filters)

def transcriptomeAlignAnalyze(transBam, statsTsv, readStatsTsv, filteredBam, filteredReads,
                              filters):
    with pysam.AlignmentFile(transBam) as bamFh:
        transcriptomeAlignAnalyzeFh(bamFh, statsTsv, readStatsTsv, filteredBam, filteredReads,
                                    filters)

def main(opts):
    transcriptomeAlignAnalyze(opts.transBam, opts.statsTsv, opts.readStatsTsv, opts.filteredBam,
                              opts.filteredReads, opts.filters)

main(parseArgs())
