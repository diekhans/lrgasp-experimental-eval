#!/usr/bin/env python3

import argparse
import pandas as pd
from pycbio.sys import fileOps


def parseArgs():
    desc = """summarize squanti data for each transcript"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("evalTsv")
    parser.add_argument("idUjcMapTsv")
    parser.add_argument("pipelineTsv")
    parser.add_argument("squantiTranscriptTsv")
    parser.add_argument("reportTsv")
    return parser.parse_args()


def squantiReport(transDf, squantiReport, fh):
    transDf = pd.merge(transDf, squantiReport, on="transcript")

    # manatee doesn't have captrap
    isManatee = "capTrapPrepCount" not in transDf.columns

    # all consider novel in manatee due to poor annotation
    if isManatee:
        novelDf = transDf
    else:
        novelDf = transDf[transDf.transcript.str.startswith('N')]

    raise Exception("wrong to sum")
    plCols = list(set(novelDf.columns) & set(["pbPlatformCount", "ontPlatformCount", "freestylePlatformCount", "cDNAPrepCount", "dRNAPrepCount", "capTrapPrepCount", "r2c2PrepCount", "freestylePrepCount", "longOnlyCatCount", "longShortCatCount", "freeStyleCatCount"]))
    pc = novelDf.loc[:, plCols].sum(axis=1).copy().convert_dtypes()
    novelDf.insert(len(novelDf.columns), 'pipeLineCount', pc)

    # novel isoforms count:
    fileOps.prRowv(fh, "novelIsoforms", len(set(novelDf.transcript)))

    # novel isoforms detected in N pipelines (different cuttons)
    # novel isoforms in less name N pipelines
    maxNp = int(novelDf.pipeLineCount.max())
    fileOps.prRowv(fh, "maxPipelines", maxNp)

    # split number of transcripts into at last 1/4

    for np in range(1, maxNp + 1):
        fileOps.prRowv(fh, "novelPipelineCnt_ge_" + str(np), len(novelDf[novelDf.pipeLineCount >= np]))
        fileOps.prRowv(fh, "novelPipelineCnt_lt_" + str(np), len(novelDf[novelDf.pipeLineCount < np]))

def getTranscriptSquantiRecs(transcriptId, idUjcMap, squantiTranscripts):
    LRGASP_ids = idUjcMap[idUjcMap.transcript == transcriptId].LRGASP_id
    mask = squantiTranscripts.LRGASP_id.isin(LRGASP_ids)
    return squantiTranscripts[mask]

def report(evalDf, idUjcMap, squantiTranscripts, fh):
    for transcriptId in evalDf.transcript:
        print("@@@@", transcriptId, file=fh)
        print(getTranscriptSquantiRecs(transcriptId, idUjcMap, squantiTranscripts).to_string(), file=fh)

def paperEvalStats(evalTsv, idUjcMapTsv, pipelineTsv, squantiTranscriptTsv, reportTsv):
    evalDf = pd.read_table(evalTsv)
    evalDf = evalDf.convert_dtypes()  # make ints ints rather than floats
    idUjcMap = pd.read_table(idUjcMapTsv)
    pipelineCodes = pd.read_table(pipelineTsv)
    squantiTranscripts = pd.read_table(squantiTranscriptTsv)
    with open(reportTsv, 'w') as fh:
        report(evalDf, idUjcMap, squantiTranscripts, fh)

def main(opts):
    paperEvalStats(opts.evalTsv, opts.idUjcMapTsv, opts.pipelineTsv,
                   opts.squantiTranscriptTsv, opts.reportTsv)

main(parseArgs())
