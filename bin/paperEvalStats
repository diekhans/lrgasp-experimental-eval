#!/usr/bin/env python3

import argparse
import pandas as pd
from pycbio.sys import fileOps
from evalLib import percent, filterToTranscript, splitBySqantiCategory, splitBySupport, addStructuralCategory

def parseArgs():
    desc = """pull stats for paper from eval spreadsheet tsv"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("evalTsv")
    parser.add_argument("statsTsv")
    opts = parser.parse_args()
    return opts


def basicReport(evalDf, fh):
    fileOps.prRowv(fh, "genes", "", "", len(set(evalDf.gene)), "")
    fileOps.prRowv(fh, "targets", "", "", len(set(evalDf.target)), "")
    fileOps.prRowv(fh, "transcripts", "", "", len(set(evalDf.transcript)), "")

def reportSupportRate(fh, label, label2, subsetDf):
    supportedDf, unsupportedDf = splitBySupport(subsetDf)
    fileOps.prRowv(fh, label, label2, "total", len(subsetDf),
                   percent(len(subsetDf), len(subsetDf))),
    fileOps.prRowv(fh, label, label2, "supported", len(supportedDf),
                   percent(len(supportedDf), len(subsetDf)))
    fileOps.prRowv(fh, label, label2, "unsupported", len(unsupportedDf),
                   percent(len(unsupportedDf), len(subsetDf)))

def gencodeReport(transDf, fh):
    # pb row is first with gencode and category
    knownDf = transDf[(transDf.gencode == "known")]
    novelDf = transDf[(transDf.gencode == "novel")]
    rejectedDf = transDf[(transDf.gencode == "rejected")]
    if len(knownDf) + len(novelDf) + len(rejectedDf) != len(transDf):
        raise Exception("logic error splitting gencode transcripts")

    reportSupportRate(fh, "gencode", "any", transDf)
    reportSupportRate(fh, "gencode", "known", knownDf)
    reportSupportRate(fh, "gencode", "novel", novelDf)
    reportSupportRate(fh, "gencode", "rejected", rejectedDf)


def sqantiReport(transDf, fh):
    knownDf, novelDf, ismDf, otherDf = splitBySqantiCategory(transDf)

    reportSupportRate(fh, "transcripts", "any", transDf)
    reportSupportRate(fh, "transcripts", "known", knownDf)
    reportSupportRate(fh, "transcripts", "novel", novelDf)
    reportSupportRate(fh, "transcripts", "ism", ismDf)
    reportSupportRate(fh, "transcripts", "other", otherDf)


def report(evalDf, fh):
    fileOps.prRowv(fh, "type", "subtype", "support", "count", "rate")
    basicReport(evalDf, fh)
    transDf = filterToTranscript(evalDf)
    if 'gencode' in evalDf.columns:
        gencodeReport(transDf, fh)
    else:
        sqantiReport(transDf, fh)

def paperEvalStats(evalTsv, statsTsv):
    evalDf = pd.read_table(evalTsv)
    evalDf = evalDf.convert_dtypes()  # make ints ints rather than floats
    addStructuralCategory(evalDf)
    with open(statsTsv, 'w') as fh:
        report(evalDf, fh)

def main(opts):
    paperEvalStats(opts.evalTsv, opts.statsTsv)

main(parseArgs())
