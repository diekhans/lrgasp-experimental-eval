#!/usr/bin/env python3

import argparse
import pandas as pd
from pycbio.sys import fileOps


def parseArgs():
    desc = """pull stats for paper from eval spreadsheet tsv, add joinAnnotSummary added consolidate information"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--squantiTsv")
    parser.add_argument("evalTsv")
    parser.add_argument("statsTsv")
    return parser.parse_args()


def percent(n, total):
    if total == 0:
        return 0.0
    else:
        return round(100 * (n / total), 1)

_supports = ("supported", "likely", "unsupported")
_supportRanks = {
    "supported": 1,
    "likely": 2,
    "unsupported": 3,
    "": 4
}

def filterToTranscript(evalDf):
    "get a per-transcript data frame, with maximum support, worth with squanti or gencode"

    transDf = evalDf[evalDf.plat == "pb"]  # one line per target
    transDf.insert(0, "rank", transDf.category.apply(lambda c: _supportRanks[c]))
    transDf = transDf.sort_values(["transcript", "rank"])
    transDf = transDf.drop_duplicates("transcript")


    # drop per-target columns
    dropCols = set(transDf.columns) & set(["rank", "target", "position", "plat", "chain", "chain_in2", "sim_100", "sim_98", "sim_95", "indel_0", "indel_2", "notes"])
    transDf = transDf.drop(dropCols, axis=1)

    return transDf

def basicReport(evalDf, fh):
    fileOps.prRowv(fh, "genes", len(set(evalDf.gene)))
    fileOps.prRowv(fh, "targets", len(set(evalDf.target)))
    fileOps.prRowv(fh, "transcripts", len(set(evalDf.transcript)))

def gencodeReport(transDf, fh):
    # pb row is first with gencode and category
    knownDf = transDf[(transDf.gencode == "known")]
    novelDf = transDf[(transDf.gencode == "novel")]
    rejectedDf = transDf[(transDf.gencode == "rejected")]

    fileOps.prRowv(fh, "gencodeTotal", len(knownDf) + len(novelDf) + len(rejectedDf))

    # GENCODE-known, N=XX:
    fileOps.prRowv(fh, "gencodeKnown", len(knownDf))

    # GENCODE-novel, N=XX:,
    fileOps.prRowv(fh, "gencodeNovel", len(novelDf))

    # GENCODE-suspect, N=XX:
    fileOps.prRowv(fh, "gencodeRejected", len(rejectedDf))

    # GENCODE-known validation rate, XX%
    fileOps.prRowv(fh, "gencodeKnowSupported",
                   len(knownDf[knownDf.category != "unsupported"]))
    fileOps.prRowv(fh, "gencodeKnowSupportedRate",
                   percent(len(knownDf[knownDf.category != "unsupported"]),
                           len(knownDf)))

    # GENCODE-known that failed to validate n+XX
    fileOps.prRowv(fh, "gencodeKnowUnsupported",
                   len(knownDf[knownDf.category == "unsupported"]))
    fileOps.prRowv(fh, "gencodeKnowUnsupportedRate",
                   percent(len(knownDf[knownDf.category == "unsupported"]),
                           len(knownDf)))

    # GENCODE-novel   validation rate, XX %
    fileOps.prRowv(fh, "gencodeNovelSupported",
                   len(novelDf[novelDf.category == "supported"]))
    fileOps.prRowv(fh, "gencodeNovelSupportedRate",
                   percent(len(novelDf[novelDf.category == "supported"]),
                           len(novelDf)))

    # GENCODE-suspect validation rate of XX,
    fileOps.prRowv(fh, "gencodeRejectedSupported",
                   len(rejectedDf[rejectedDf.category == "supported"]))
    fileOps.prRowv(fh, "gencodeRejectedSupportedRate",
                   percent(len(rejectedDf[rejectedDf.category == "supported"]),
                           len(rejectedDf)))

    # GENCODE-suspect unsupported rate of XX,
    fileOps.prRowv(fh, "gencodeRejectedUnupported",
                   len(rejectedDf[rejectedDf.category != "supported"]))
    fileOps.prRowv(fh, "gencodeRejectedUnupportedRate",
                   percent(len(rejectedDf[rejectedDf.category != "supported"]),
                           len(rejectedDf)))


def squantiReport(transDf, squantiStats, fh):
    transDf = pd.merge(transDf, squantiStats, on="transcript")

    # manatee doesn't have captrap
    isManatee = "capTrapPrepCount" not in transDf.columns

    # all consider novel in manatee due to poor annotation
    if isManatee:
        novelDf = transDf
    else:
        novelDf = transDf[transDf.transcript.str.startswith('N')]

    catCols = [c for c in ["longOnlyCatCount", "longShortCatCount", "freeStyleCatCount"]
               if c in novelDf.columns]
    pc = novelDf.loc[:, catCols].sum(axis=1).copy().convert_dtypes()
    novelDf.insert(len(novelDf.columns), 'pipeLineCount', pc)

    # novel isoforms count:
    fileOps.prRowv(fh, "novelIsoforms", len(set(novelDf.transcript)))

    # novel isoforms detected in N pipelines (different cuttons)
    # novel isoforms in less name N pipelines
    maxNp = int(novelDf.pipeLineCount.max())
    fileOps.prRowv(fh, "maxPipelines", maxNp)

    # split number of transcripts into at last 1/4

    for np in range(1, maxNp + 1):
        fileOps.prRowv(fh, "novelPipelineCnt_ge_" + str(np), len(novelDf[novelDf.pipeLineCount >= np]))
        fileOps.prRowv(fh, "novelPipelineCnt_lt_" + str(np), len(novelDf[novelDf.pipeLineCount < np]))

def report(evalDf, fh, squantiStats):
    fileOps.prRowv(fh, "name", "value")
    basicReport(evalDf, fh)
    transDf = filterToTranscript(evalDf)
    if 'gencode' in evalDf.columns:
        gencodeReport(transDf, fh)
    elif squantiStats is not None:
        squantiReport(transDf, squantiStats, fh)


def paperEvalStats(evalTsv, statsTsv, squantiTsv):
    evalDf = pd.read_table(evalTsv)
    squantiStats = None if squantiTsv is None else pd.read_table(squantiTsv)
    evalDf = evalDf.convert_dtypes()  # make ints ints rather than floats
    with open(statsTsv, 'w') as fh:
        report(evalDf, fh, squantiStats)

def main(opts):
    paperEvalStats(opts.evalTsv, opts.statsTsv, opts.squantiTsv)

main(parseArgs())
